<project name="slice-impl">

    <target name="-generate-slicer-bootstrap" depends="-init-compiler">

        <local name="relpath"/>
        <x-get-relative-path from="${bootstrap.base.path}"
                             to="${framework.packages.dir}"
                             property="relpath"/>
    
        <local name="override.tpl"/>
        <local name="override.tpl.type"/>

        <x-script-def name="x-detect-sencha-5">
            <![CDATA[
                importPackage(com.sencha.util);
                importPackage(com.sencha.logging);
                
                var frameworkName = project.getProperty("framework.name"),
                    frameworkVersion = project.getProperty("framework.version") || "0.0.0.0";
                    
                try {
                    var frameworkVer = new Version(frameworkVersion),
                        limit = new Version('5.0.0.0');
                    if(frameworkVer.compareTo(limit) >= 0) {
                        project.setProperty('override.tpl.type', 'jsonp');
                        project.setProperty('override.tpl', 'Ext.Loader.loadScriptsSync');
                    }
                } catch (err) {
                }
            ]]>
        </x-script-def>
        <x-detect-sencha-5/>  
        
        <property name="override.tpl.type" value="tpl"/>
        <property name="override.tpl" value='Ext.Loader.loadScriptFile("{0}", Ext.emptyFn);'/>
        
        <x-bootstrap file="${bootstrap.example.js}"
                     basedir="${bootstrap.base.path}"
                     includeBoot="true"
                     includeCoreFiles="true"
                     overrideTpl="${override.tpl}"
                     overrideTplType="${override.tpl.type}"
                     overrideExcludeTags="">
<![CDATA[
Ext.Boot.loadSync([
    "render.js",
    "${relpath}/ext-theme-base/sass/example/manifest.js",
    "${relpath}/ext-theme-base/sass/example/shortcuts.js",
    "custom.js"
]);
]]>
        </x-bootstrap>
    </target>
 
    <target name="-update-slicer-css">
        <x-get-relative-path
            from="${package.example.dir}"
            to="${package.example.css}"
            property="package.example.css.path"
            />
        
<!--update the app's example to point to the build output-->
<echo file="${package.example.dir}/example.css">
/*
 * This file is generated by Sencha Cmd and should NOT be edited. It redirects
 * to the most recently built CSS file for the application to allow theme.html
 * to load properly for image slicing (required to support non-CSS3 browsers
 * such as IE9 and below).
 */
@import '${package.example.css.path}';
</echo>
    </target>
 
 
    <target name="-capture-theme-image"
            depends="-generate-slicer-bootstrap,-update-slicer-css">
        <echo>Capture theme image to ${build.dir}/theme-capture.png</echo>
        <x-sencha-command dir="${package.dir}">
            <![CDATA[
            theme
                capture
                    -page=${package.sass.dir}/example/theme.html
                    -image=${build.dir}/theme-capture.png
                    -manifest=${build.dir}/theme-capture.json
            ]]>
        </x-sencha-command>
    </target>
    
    <target name="-slice-theme-images" depends="-capture-theme-image">
        <echo>Slicing theme images to ${build.resources.dir}</echo>
        <x-sencha-command dir="${package.dir}">
            <![CDATA[
            fs
                slice
                    ${build.slice.options}
                    -image=${build.dir}/theme-capture.png
                    -manifest=${build.dir}/theme-capture.json
                    -out=${build.resources.dir}
            ]]>
        </x-sencha-command>
    </target>
 
    <target name="-before-slice"/>
    <target name="-after-slice"/>
    <target name="-slice" 
            depends="-slice-theme-images"/>

</project>
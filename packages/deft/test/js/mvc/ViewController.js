// Generated by CoffeeScript 1.8.0

/*
Copyright (c) 2012 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
 */
describe('Deft.mvc.ViewController', function() {
  var hasListener;
  hasListener = function(observable, eventName) {
    return observable.hasListener(eventName);
  };
  describe('Observer creation', function() {
    beforeEach(function() {
      Ext.define('NestedObservable', {
        constructor: function() {
          this.observable = Ext.create('Ext.util.Observable');
          return this.callParent(arguments);
        }
      });
      Ext.define('DeeplyNestedObservable', {
        constructor: function() {
          this.nested = Ext.create('NestedObservable');
          return this.callParent(arguments);
        }
      });
    });
    afterEach(function() {
      delete NestedObservable;
      delete DeeplyNestedObservable;
    });
    specify('merges child observe configurations', function() {
      var expectedObserveConfiguration, viewController;
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclassViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclassMessage: ['subclassMessageHandler'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('merges observe configurations when extend when a handler is a list', function() {
      var expectedObserveConfiguration, viewController;
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler1, subclassMessageHandler2'
          }
        }
      });
      viewController = Ext.create('ExampleSubclassViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclassMessage: ['subclassMessageHandler1', 'subclassMessageHandler2'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('merges multiple levels of observe configurations throughout a class hierarchy', function() {
      var expectedObserveConfiguration, viewController;
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: "baseMessageHandler"
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: "subclassMessageHandler"
          }
        }
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            subclass2Message: "subclass2MessageHandler"
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclass2Message: ['subclass2MessageHandler'],
          subclassMessage: ['subclassMessageHandler'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
      delete ExampleSubclass2ViewController;
    });
    specify('merges multiple levels of child observe configurations, with child observers taking precedence', function() {
      var expectedObserveConfiguration, viewController;
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            baseMessage: 'subclass2MessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          baseMessage: ['subclass2MessageHandler', 'baseMessageHandler'],
          subclassMessage: ['subclassMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
      delete ExampleSubclass2ViewController;
    });
    specify('merges multiple levels of child observe configurations when middle subclass has no observers', function() {
      var expectedObserveConfiguration, viewController;
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController'
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            subclass2Message: 'subclass2MessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclass2Message: ['subclass2MessageHandler'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
      delete ExampleSubclass2ViewController;
    });
    specify('merges multiple levels of subclass observe configurations when the base class has no observers', function() {
      var expectedObserveConfiguration, viewController;
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController'
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            subclass2Message: 'subclass2MessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclass2Message: ['subclass2MessageHandler'],
          subclassMessage: ['subclassMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
      delete ExampleSubclass2ViewController;
    });
    specify('attaches listeners to observed objects in a ViewController with no subclasses', function() {
      var eventData, messageBus, viewController;
      eventData = {
        value1: true,
        value2: false
      };
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null
        },
        observe: {
          messageBus: {
            message: 'messageHandler'
          }
        },
        messageHandler: function(data) {}
      });
      sinon.spy(ExampleViewController.prototype, 'messageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      viewController = Ext.create('ExampleViewController', {
        messageBus: messageBus
      });
      expect(hasListener(messageBus, 'message')).to.be["true"];
      messageBus.fireEvent('message', eventData);
      expect(viewController.messageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(viewController);
      delete ExampleViewController;
    });
    specify('attaches listeners to observed objects in a ViewController subclass where the subclass has an observe configuration', function() {
      var baseEventData, messageBus, store, storeEventData, subclassEventData, viewController;
      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        value2: true,
        value3: false
      };
      storeEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          myStore: null
        },
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          },
          myStore: {
            beforesync: 'storeHandler'
          }
        },
        baseMessageHandler: function(data) {},
        storeHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        myStore: store
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(store, 'beforesync')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      store.fireEvent('beforesync', storeEventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(viewController);
      expect(viewController.storeHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(viewController);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('attaches listeners (with options) to observed objects in a ViewController', function() {
      var baseEventData, expectedScope, messageBus, store, storeEventData, subclassEventData, viewController;
      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        value2: true,
        value3: false
      };
      storeEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          myStore: null
        },
        observe: {
          messageBus: [
            {
              event: 'baseMessage',
              fn: 'baseMessageHandler',
              scope: expectedScope
            }
          ],
          myStore: [
            {
              event: 'beforesync',
              fn: 'storeHandler',
              scope: expectedScope
            }
          ]
        },
        baseMessageHandler: function(data) {},
        storeHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'subclassMessage',
              fn: 'subclassMessageHandler',
              scope: expectedScope
            }
          ]
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        myStore: store
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(store, 'beforesync')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      store.fireEvent('beforesync', storeEventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(expectedScope);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(expectedScope);
      expect(viewController.storeHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(expectedScope);
      delete ExampleScope;
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('attaches listeners to nested properties of observed objects', function() {
      var deeply, deeplyNestedObservableEventData, messageBus, messageEventData, store, storeProxyEventData, viewController;
      messageEventData = {
        value1: true,
        value2: false
      };
      storeProxyEventData = {
        value3: true,
        value4: false
      };
      deeplyNestedObservableEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          myStore: null,
          deeply: null
        },
        observe: {
          messageBus: {
            message: 'messageHandler'
          },
          'myStore.proxy': {
            metachange: 'storeProxyHandler'
          }
        },
        messageHandler: function(data) {},
        storeProxyHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          'deeply.nested.observable': {
            exception: "deeplyNestedObservableHandler"
          }
        },
        deeplyNestedObservableHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'messageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeProxyHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'deeplyNestedObservableHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      deeply = Ext.create('DeeplyNestedObservable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        myStore: store,
        deeply: deeply
      });
      messageBus.fireEvent('message', messageEventData);
      store.getProxy().fireEvent('metachange', storeProxyEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableEventData);
      expect(viewController.messageHandler).to.be.calledOnce.and.calledWith(messageEventData).and.calledOn(viewController);
      expect(viewController.storeProxyHandler).to.be.calledOnce.and.calledWith(storeProxyEventData).and.calledOn(viewController);
      expect(viewController.deeplyNestedObservableHandler).to.be.calledOnce.and.calledWith(deeplyNestedObservableEventData).and.calledOn(viewController);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('attaches listeners in the base class and subclass to the same observed object', function() {
      var eventData, messageBus, viewController;
      eventData = {
        value1: true,
        value2: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          myStore: null
        },
        observe: {
          messageBus: {
            message: 'baseMessageHandler'
          }
        },
        baseMessageHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            message: 'subclassMessageHandler'
          }
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus
      });
      expect(hasListener(messageBus, 'message')).to.be["true"];
      messageBus.fireEvent('message', eventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(viewController);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('attaches listeners (with options) in the base class and subclass to the same observed object', function() {
      var eventData, expectedScope, messageBus, viewController;
      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventData = {
        value1: true,
        value2: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null
        },
        observe: {
          messageBus: [
            {
              event: 'message',
              fn: 'baseMessageHandler',
              scope: expectedScope
            }
          ]
        },
        baseMessageHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'message',
              fn: 'subclassMessageHandler',
              scope: expectedScope
            }
          ]
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus
      });
      expect(hasListener(messageBus, 'message')).to.be["true"];
      messageBus.fireEvent('message', eventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(expectedScope);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(expectedScope);
      delete ExampleScope;
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('creates observers specified via a variety of the available observe property syntax', function() {
      var baseEventData, deeply, deeplyNestedObservableData, messageBus, store, storeEventData, subclassEventData, subclassEventData2, viewController;
      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        valueA: true,
        valueB: false
      };
      subclassEventData2 = {
        valueC: true,
        valueD: false
      };
      storeEventData = {
        value3: true,
        value4: false
      };
      deeplyNestedObservableData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          myStore: null,
          deeply: null
        },
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          },
          'myStore.proxy': [
            {
              event: 'metachange',
              fn: 'storeProxyHandler'
            }
          ]
        },
        baseMessageHandler: function(data) {},
        storeProxyHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'baseMessage',
              fn: 'subclassMessageHandlerForBaseMessage'
            }, {
              event: 'subclassMessage',
              fn: 'subclassMessageHandler'
            }, {
              subclassMessage2: 'subclassMessageHandler2'
            }
          ],
          'deeply.nested.observable': [
            {
              event: 'exception',
              fn: 'deeplyNestedObservableHandler'
            }
          ]
        },
        subclassMessageHandlerForBaseMessage: function(data) {},
        subclassMessageHandler: function(data) {},
        subclassMessageHandler2: function(data) {},
        deeplyNestedObservableHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeProxyHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandlerForBaseMessage');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler2');
      sinon.spy(ExampleSubclassViewController.prototype, 'deeplyNestedObservableHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      deeply = Ext.create('DeeplyNestedObservable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        myStore: store,
        deeply: deeply
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage2')).to.be["true"];
      expect(hasListener(store.getProxy(), 'metachange')).to.be["true"];
      expect(hasListener(deeply.nested.observable, 'exception')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      messageBus.fireEvent('subclassMessage2', subclassEventData2);
      store.getProxy().fireEvent('metachange', storeEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandlerForBaseMessage).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler2).to.be.calledOnce.and.calledWith(subclassEventData2).and.calledOn(viewController);
      expect(viewController.storeProxyHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(viewController);
      expect(viewController.deeplyNestedObservableHandler).to.be.calledOnce.and.calledWith(deeplyNestedObservableData).and.calledOn(viewController);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
    specify('creates observers specified via a variety of the available observe property syntax (with event options)', function() {
      var baseEventData, deeply, deeplyNestedObservableEventData, messageBus, store, storeEventData, subclassEventData, subclassEventData2, viewController;
      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        valueA: true,
        valueB: false
      };
      subclassEventData2 = {
        valueC: true,
        valueD: false
      };
      storeEventData = {
        value3: true,
        value4: false
      };
      deeplyNestedObservableEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          myStore: null,
          deeply: null
        },
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          },
          'myStore.proxy': [
            {
              event: 'metachange',
              fn: 'storeProxyHandler',
              single: true
            }
          ]
        },
        baseMessageHandler: function(data) {},
        storeProxyHandler: function(data, eventOptions) {
          expect(eventOptions.single).to.be["true"];
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'baseMessage',
              fn: 'subclassMessageHandlerForBaseMessage'
            }, {
              event: 'subclassMessage',
              fn: 'subclassMessageHandler',
              single: true
            }, {
              subclassMessage2: 'subclassMessageHandler2'
            }
          ],
          'deeply.nested.observable': [
            {
              event: 'exception',
              fn: 'deeplyNestedObservableHandler',
              single: true
            }
          ]
        },
        subclassMessageHandlerForBaseMessage: function(data) {},
        subclassMessageHandler: function(data, eventOptions) {
          expect(eventOptions.single).to.be["true"];
        },
        subclassMessageHandler2: function(data) {},
        deeplyNestedObservableHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeProxyHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandlerForBaseMessage');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler2');
      sinon.spy(ExampleSubclassViewController.prototype, 'deeplyNestedObservableHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      deeply = Ext.create('DeeplyNestedObservable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        myStore: store,
        deeply: deeply
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage2')).to.be["true"];
      expect(hasListener(store.getProxy(), 'metachange')).to.be["true"];
      expect(hasListener(deeply.nested.observable, 'exception')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      messageBus.fireEvent('subclassMessage2', subclassEventData2);
      store.getProxy().fireEvent('metachange', storeEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      store.getProxy().fireEvent('metachange', storeEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableEventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandlerForBaseMessage).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler2).to.be.calledOnce.and.calledWith(subclassEventData2).and.calledOn(viewController);
      expect(viewController.storeProxyHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(viewController);
      expect(viewController.deeplyNestedObservableHandler).to.be.calledOnce.and.calledWith(deeplyNestedObservableEventData).and.calledOn(viewController);
      delete ExampleBaseViewController;
      delete ExampleSubclassViewController;
    });
  });
  describe('Handles anticipated uses of mixins in view controllers', function() {
    delete ExampleComponent;
    delete ExampleView;
    beforeEach(function() {
      Ext.define('ExampleComponent', {
        extend: 'Ext.Component',
        alias: 'widget.example',
        renderTo: 'componentTestArea',
        fireExampleEvent: function(value) {
          this.fireEvent('exampleevent', this, value);
        }
      });
      Ext.define('ExampleView', {
        extend: 'Ext.Container',
        renderTo: 'componentTestArea',
        items: [
          {
            xtype: 'example',
            itemId: 'example'
          }
        ],
        config: {
          items: [
            {
              xtype: 'example',
              itemId: 'example'
            }
          ]
        },
        fireExampleEvent: function(value) {
          this.fireEvent('exampleevent', this, value);
        }
      });
      Ext.DomHelper.append(Ext.getBody(), '<div id="componentTestArea" style="visibility: hidden"></div>');
    });
    afterEach(function() {
      if (Deft.Injector.inject.restore) {
        Deft.Injector.inject.restore();
      }
      Ext.removeNode(Ext.get('componentTestArea').dom);
      delete ExampleComponent;
      delete ExampleView;
    });
    return specify('creates and destroys mixed in classes for view controllers and performs injections using ViewController class\'s Injectable mixin.', function() {
      var injectStub, view, viewController;
      injectStub = sinon.stub(Deft.Injector, 'inject');
      Ext.define('ViewControllerMixin', {
        extend: 'Ext.Mixin',
        mixins: ['Deft.mixin.Injectable', 'Deft.mixin.Observer'],
        inject: ['identifier2'],
        constructor: function() {
          var temp;
          temp = this.inject;
          debugger;
          return this.callParent(arguments);
        },
        destroy: function() {
          Ext.log("mixin destroy");
          this.callParent(arguments);
          this.removeObservers();
          return true;
        }
      });
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        mixins: ['ViewControllerMixin'],
        inject: ['identifier'],
        constructor: function() {
          var temp;
          temp = this.inject;
          debugger;
          return this.callParent(arguments);
        },
        destroy: function() {
          Ext.log("ExampleViewController destroy");
          this.callParent(arguments);
          return true;
        }
      });
      Ext.define('AssociatedViewController2', {
        extend: 'Deft.mvc.ViewController'
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController');
      viewController.setView(view);
      expect(viewController.getView()).to.equal(view);
      viewController.destroy();
      injectStub.restore();
      delete ExampleViewController;
      delete ViewControllerMixin;
    });
  });
  describe('Destruction and clean-up', function() {
    before(function() {
      Ext.define('ExampleComponent', {
        extend: 'Ext.Component',
        alias: 'widget.example'
      });
      Ext.define('ExampleView', {
        extend: 'Ext.Container',
        renderTo: 'componentTestArea',
        items: [
          {
            xtype: 'example',
            itemId: 'example'
          }
        ],
        config: {
          items: [
            {
              xtype: 'example',
              itemId: 'example'
            }
          ]
        }
      });
    });
    after(function() {
      delete ExampleComponent;
      delete ExampleView;
    });
    beforeEach(function() {
      Ext.DomHelper.append(Ext.getBody(), '<div id="componentTestArea" style="visibility: hidden"></div>');
    });
    afterEach(function() {
      Ext.removeNode(Ext.get('componentTestArea').dom);
    });
    specify('calls destroy() when the associated view is destroyed', function() {
      var isViewDestroyed, view, viewController;
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        destroy: function() {
          return true;
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController');
      viewController.setView(view);
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(isViewDestroyed).to.be["true"];
      expect(viewController.destroy).to.be.calledOnce;
      delete ExampleViewController;
    });
    specify('cancels view destruction if the view controller\'s destroy() returns false', function() {
      var isViewDestroyed, view, viewController;
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        destroy: function() {
          return false;
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController');
      viewController.setView(view);
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.calledOnce;
      expect(isViewDestroyed).to.be["false"];
      delete ExampleViewController;
    });
    return specify('removes listeners from observed objects when the view controller is destroyed', function() {
      var store1, store2, view, viewController;
      Ext.define('ExampleClass', {
        extend: 'Deft.mvc.ViewController',
        config: {
          store1: null,
          store2: null
        },
        observe: {
          store1: {
            beforesync: 'genericHandler'
          },
          'store1.proxy': {
            customevent: 'genericHandler'
          },
          store2: {
            beforesync: 'genericHandler',
            beforeload: 'genericHandler'
          }
        },
        genericHandler: function() {}
      });
      view = Ext.create('ExampleView');
      store1 = Ext.create('Ext.data.ArrayStore');
      store2 = Ext.create('Ext.data.ArrayStore');
      expect(hasListener(store1, 'beforesync')).to.be["false"];
      expect(hasListener(store1.getProxy(), 'customevent')).to.be["false"];
      expect(hasListener(store2, 'beforeload')).to.be["false"];
      viewController = Ext.create('ExampleClass', {
        store1: store1,
        store2: store2
      });
      viewController.setView(view);
      sinon.spy(viewController, 'removeObservers');
      expect(hasListener(store1, 'beforesync')).to.be["true"];
      expect(hasListener(store1.getProxy(), 'customevent')).to.be["true"];
      expect(hasListener(store2, 'beforeload')).to.be["true"];
      expect(hasListener(store2, 'beforesync')).to.be["true"];
      view.destroy();
      expect(viewController.removeObservers).to.be.calledOnce;
      expect(hasListener(store1, 'beforesync')).to.be["false"];
      expect(hasListener(store1.getProxy(), 'customevent')).to.be["false"];
      expect(hasListener(store2, 'beforesync')).to.be["false"];
      expect(hasListener(store2, 'beforeload')).to.be["false"];
      delete ExampleClass;
    });
  });
});

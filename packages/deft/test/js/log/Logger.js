// Generated by CoffeeScript 1.8.0

/*
Copyright (c) 2012 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
 */
describe('Deft.log.Logger', function() {
  describe('log()', function() {
    return describe('logs a message with the specified priority', function() {
      var checkCall, logFunction;
      logFunction = null;
      checkCall = function(message, priority) {
        return expect(logFunction).to.be.calledOnce.and.calledWith(message, priority);
      };
      beforeEach(function() {
        logFunction = sinon.stub(Ext.Logger, 'log');
      });
      afterEach(function() {
        logFunction.restore();
      });
      specify('no priority specified', function() {
        Deft.Logger.log('message', 'info');
        checkCall('message', 'info');
      });
      specify('verbose', function() {
        Deft.Logger.log('message', 'verbose');
        checkCall('message', 'info');
      });
      specify('deprecate', function() {
        Deft.Logger.log('message', 'deprecate');
        checkCall('message', 'warn');
      });
      specify('warn', function() {
        Deft.Logger.log('message', 'warn');
        checkCall('message', 'warn');
      });
      specify('error', function() {
        Deft.Logger.log('message', 'error');
        checkCall('message', 'error');
      });
    });
  });
  describe('verbose()', function() {
    var logFunction;
    logFunction = null;
    beforeEach(function() {
      return logFunction = sinon.stub(Deft.Logger, 'log');
    });
    afterEach(function() {
      return logFunction.restore();
    });
    specify('calls log() with specified message with verbose priority', function() {
      Deft.Logger.verbose('message');
      expect(logFunction).to.be.calledOnce.and.calledWith('message', 'verbose');
    });
  });
  describe('info()', function() {
    var logFunction;
    logFunction = null;
    beforeEach(function() {
      return logFunction = sinon.stub(Deft.Logger, 'log');
    });
    afterEach(function() {
      return logFunction.restore();
    });
    specify('calls log() with specified message with info priority', function() {
      Deft.Logger.info('message');
      expect(logFunction).to.be.calledOnce.and.calledWith('message', 'info');
    });
  });
  describe('deprecate()', function() {
    var logFunction;
    logFunction = null;
    beforeEach(function() {
      return logFunction = sinon.stub(Deft.Logger, 'log');
    });
    afterEach(function() {
      return logFunction.restore();
    });
    specify('calls log() with specified message with deprecate priority', function() {
      Deft.Logger.deprecate('message');
      expect(logFunction).to.be.calledOnce.and.calledWith('message', 'deprecate');
    });
  });
  describe('warn()', function() {
    var logFunction;
    logFunction = null;
    beforeEach(function() {
      return logFunction = sinon.stub(Deft.Logger, 'log');
    });
    afterEach(function() {
      return logFunction.restore();
    });
    specify('calls log() with specified message with warn priority', function() {
      Deft.Logger.warn('message');
      expect(logFunction).to.be.calledOnce.and.calledWith('message', 'warn');
    });
  });
  describe('error()', function() {
    var logFunction;
    logFunction = null;
    beforeEach(function() {
      return logFunction = sinon.stub(Deft.Logger, 'log');
    });
    afterEach(function() {
      return logFunction.restore();
    });
    specify('calls log() with specified message with error priority', function() {
      Deft.Logger.error('message');
      expect(logFunction).to.be.calledOnce.and.calledWith('message', 'error');
    });
  });
});
